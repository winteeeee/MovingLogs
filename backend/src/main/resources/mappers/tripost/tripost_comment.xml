<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.features.tripost.adapter.out.persistence.mybatis.dao.TripostCommentDao">
    <insert id="insert">
        INSERT INTO tripost_comment (
            ID,
            PARENT_ID,
            TRIPOST_ID,
            UID,
            CONTENT,
            IS_DELETED,
            CREATED_AT,
            UPDATED_AT
        )
        VALUES
        (
            #{tripostComment.id.id},
            #{tripostComment.parentId.id},
            #{tripostComment.tripostId.id},
            #{tripostComment.author.uid.id},
            #{tripostComment.content},
            #{tripostComment.isDeleted},
            #{tripostComment.createdAt},
            #{tripostComment.updatedAt}
        )
    </insert>

    <update id="update">
        UPDATE tripost_comment
        SET
            CONTENT = #{tripostComment.content},
            IS_DELETED = #{tripostComment.isDeleted},
            UPDATED_AT = #{tripostComment.updatedAt}
        WHERE ID = #{tripostComment.id.id}
    </update>

    <select id="findById">
        SELECT
            TC.ID               AS id,
            TC.TRIPOST_ID       AS tripost_id,
            TC.UID              AS uid,
            U.NAME              AS name,
            TC.CONTENT          AS content,
            TC.IS_DELETED       AS is_deleted,
            TC.CREATED_AT       AS created_at,
            TC.UPDATED_AT       AS updated_at
        FROM tripost_comment TC
            JOIN user U ON TC.UID = U.UID
        WHERE TC.ID = #{tripostCommentId.id}
    </select>

    <select id="selectPage">
        SELECT
            TC.ID               AS id,
            TC.TRIPOST_ID       AS tripost_id,
            TC.UID              AS uid,
            U.NAME              AS authorName,
            TC.CONTENT          AS content,
            TC.CREATED_AT       AS created_at,
            TC.UPDATED_AT       AS updated_at,
            (
                SELECT JSON_ARRAYAGG(
                    JSON_OBJECT(
                        'id', TCC.ID,
                        'tripostId', TCC.TRIPOST_ID,
                        'uid', TCC.UID,
                        'authorName', U2.NAME,
                        'content', TCC.CONTENT,
                        'createdAt', TCC.CREATED_AT,
                        'updatedAt', TCC.UPDATED_AT
                    )
                )
                FROM tripost_comment TCC
                    JOIN user U2 ON TCC.UID = U2.UID
                WHERE TC.ID = TCC.PARENT_ID
                    AND NOT TCC.IS_DELETED
                ORDER BY TCC.CREATED_AT ASC
            )                   AS replies
        FROM tripost_comment TC
            JOIN user U ON TC.UID = U.UID
        WHERE TC.TRIPOST_ID = #{criteria.tripostId.id}
            AND NOT TC.IS_DELETED
            AND TC.PARENT_ID IS NULL
        ORDER BY TC.CREATED_AT ASC
        LIMIT #{limit}
        OFFSET #{offset}
    </select>

    <select id="selectTotalCount">
        SELECT COUNT(*)
        FROM tripost_comment TC
        WHERE TC.TRIPOST_ID = #{criteria.tripostId.id}
            AND NOT TC.IS_DELETED
    </select>
</mapper>
